/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kform_dev.choreo.apis.choreo.v1alpha1;

import "github.com/kform-dev/choreo/apis/selector/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kform-dev/choreo/apis/choreo/v1alpha1";

message APIResourceGroup {
  // Resource defines name of the resourcce
  optional string resource = 1;

  // Group defines the group of the resource
  optional string group = 2;

  // Version defines the version of the resource
  optional string version = 3;

  // Kind defines the kind of the resource
  optional string kind = 4;

  // ListKind defines the kind of the resource
  optional string listKind = 5;

  // Namespaced defines if the resource is namespaced
  optional bool namespaced = 6;

  // Categories defines if the categories of the resource
  repeated string categories = 7;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// APIResources defines the APIResources API
message APIResources {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional APIResourcesSpec spec = 2;
}

// APIResourcesSpec defines the desired state of Reconciler
message APIResourcesSpec {
  // Groups define the resources per group
  repeated APIResourceGroup groups = 1;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Cluster,categories={choreo}
// Branch defines the Branch API
message Branch {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
}

// +kubebuilder:object:root=true
// BranchList contains a list of Branchs
message BranchList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Branch items = 2;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:resource:scope=Cluster,categories={pkg, knet}
// ConfigGenerator defines the ConfigGenerator API
message ConfigGenerator {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ConfigGeneratorSpec spec = 2;

  optional ConfigGeneratorStatus status = 3;
}

// +kubebuilder:object:root=true
// ConfigGeneratorList contains a list of ConfigGenerators
message ConfigGeneratorList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ConfigGenerator items = 2;
}

message ConfigGeneratorProviderSelector {
  // Resource defines the resource identifier on the basis of apiVersion (group/version) and kind
  optional ResourceGVK resource = 1;

  // match is a map of {expression,value} pairs. A single {expression,value} in the match
  // map is equivalent to an element of matchExpressions, whose expression field is "expression", the
  // operator is "In", and the values array contains only "value". The requirements are ANDed.
  // +optional
  map<string, string> match = 2;

  // FieldPath that provides the provider information
  optional string fieldPath = 3;
}

// ConfigGeneratorSpec defines the desired state of ConfigGenerator
message ConfigGeneratorSpec {
  // Resource defines the resource identifier on the basis of apiVersion (group/version) and kind
  // ResourceGVK `json:",inline" protobuf:"bytes,1,opt,name=resource"`
  // ProviderSelector defines how to select the provider
  optional ConfigGeneratorProviderSelector providerSelector = 1;

  // Name of the basepath where the vendor translation logic is located
  // Right now we assume a structure <basePath>/<providername as per selector>/<group_resource>
  // This might be expanded in the future
  optional string dir = 2;
}

// ConfigGeneratorStatus defines the observed state of ConfigGenerator
message ConfigGeneratorStatus {
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:resource:scope=Cluster,categories={choreo}
// Diff defines the Diff API
message Diff {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional DiffSpec spec = 2;

  optional DiffStatus status = 3;
}

message DiffItem {
  // Resource defines the resource identifier on the basis of apiVersion (group/version) and kind
  optional ResourceGVK resource = 1;

  optional string name = 2;

  optional string namespace = 3;

  optional string status = 4;

  // Diff represents a diff string with the differences
  optional string diff = 5;
}

// +kubebuilder:object:root=true
// DiffList contains a list of Diffs
message DiffList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Diff items = 2;
}

// DiffSpec defines the desired state of Diff
message DiffSpec {
}

// DiffStatus defines the observed state of Diff
message DiffStatus {
  repeated DiffItem items = 1;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:resource:scope=Cluster,categories={choreo}
// Library defines the Library API
message Library {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional LibrarySpec spec = 2;

  optional LibraryStatus status = 3;
}

// +kubebuilder:object:root=true
// LibraryList contains a list of Librarys
message LibraryList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Library items = 2;
}

// LibrarySpec defines the desired state of Library
message LibrarySpec {
  // Type defines the software technology this library contains
  optional string type = 1;

  // Code supporting the Library
  optional string code = 2;
}

// LibraryStatus defines the observed state of Library
message LibraryStatus {
}

message LoaderAnnotation {
  optional string kind = 1;

  optional string url = 2;

  optional string directory = 3;

  optional string ref = 4;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:resource:scope=Cluster,categories={choreo}
// Reconciler defines the Reconciler API
message Reconciler {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ReconcilerSpec spec = 2;

  optional ReconcilerStatus status = 3;
}

// ReconcilerList contains a list of Reconcilers
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ReconcilerList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Reconciler items = 2;
}

message ReconcilerResource {
  // Resource defines the resource identifier on the basis of apiVersion (group/version) and kind
  optional ResourceGVK resource = 1;

  // A selector to restrict the resources by their fields on which the pipeline is triggered
  // Defaults to everything.
  // +optional
  optional .github.com.kform_dev.choreo.apis.selector.v1alpha1.ExpressionSelector selector = 2;
}

// ReconcilerSpec defines the desired state of Reconciler
message ReconcilerSpec {
  // ConditionType defines the condition used by this reconciler to reflect the status of its operation
  optional string conditionType = 1;

  // SpecUpdate indicates the reconciler is updating the spec with additional data
  optional bool specUpdate = 2;

  // For defines the resource and business logic of the reconciler for this Reconciler.
  optional ReconcilerResource for = 3;

  // Owns define the child resources this Reconciler generates as part of its business logic.
  // The For resource of this Reconciler owns the derived child resources.
  // The OwnerReferences are set by the internal reconciler logic. Changes to any of these resources
  // will trigger the Reconciler reconciler
  repeated ReconcilerResource owns = 4;

  // Watches defines the resources on which the main reconciler can be retriggered. The pipeline/business logic
  // determines if the reconciler is to be retriggered.
  repeated ReconcilerResource watches = 5;

  // Type defines the software technology this library contains
  optional string type = 6;

  // Code supporting the reconciler
  map<string, string> code = 7;
}

// ReconcilerStatus defines the observed state of Reconciler
message ReconcilerStatus {
}

message ResourceGVK {
  // Group defines the group and version of the resource
  optional string group = 1;

  // Version defines the version of the resource
  optional string version = 2;

  // Kind defines the kind of the resource
  optional string kind = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:resource:scope=Cluster,categories={choreo}
// Snapshot defines the Snapshot API
message Snapshot {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SnapshotSpec spec = 2;

  optional SnapshotStatus status = 3;
}

// +kubebuilder:object:root=true
// SnapshotList contains a list of Snapshots
message SnapshotList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Snapshot items = 2;
}

// SnapshotSpec defines the desired state of Snapshot
message SnapshotSpec {
}

// SnapshotStatus defines the observed state of Snapshot
message SnapshotStatus {
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Cluster,categories={pkg, knet}
// ConfigGenerator defines the ConfigGenerator API
message UpstreamRef {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional UpstreamRefSpec spec = 2;
}

// UpstreamRefSpec defines the desired state of the UpstreamRef
message UpstreamRefSpec {
  // Type defines the type of upstream ref
  // a api/crd type
  // a full type
  // +kubebuilder:validation:Enum=crd;all;
  // +kubebuilder:default:=full
  optional string type = 1;

  // Priority defines the priority of the upstreamRef; used to define the sequence of execution
  // +kubebuilder:default:=10
  optional int64 priority = 2;

  // URL specifies the base URL for a given repository for example:
  //   `https://github.com/kubenet.dev/kubenet-catalog.git`
  optional string url = 3;

  // Directory defines the name of the directory for the ref.
  // if not present the root directory is assumed
  optional string directory = 4;

  // Ref defines the upstream reference
  optional UpstreamReference ref = 5;

  // Credentials defines the name of the secret that holds the credentials to connect to the upstream Ref
  optional string credentials = 6;

  // Includes define the files to include
  // Typically used for CRD upstream types
  repeated string includes = 7;
}

message UpstreamReference {
  // +kubebuilder:validation:Enum=hash;tag;
  // +kubebuilder:default:=hash
  optional string type = 1;

  // Name defines the reference name
  optional string name = 2;
}

