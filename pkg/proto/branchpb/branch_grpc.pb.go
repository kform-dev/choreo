// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: branch.proto

package branchpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BranchClient is the client API for Branch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BranchClient interface {
	Get(ctx context.Context, in *Get_Request, opts ...grpc.CallOption) (*Get_Response, error)
	List(ctx context.Context, in *List_Request, opts ...grpc.CallOption) (*List_Response, error)
	Create(ctx context.Context, in *Create_Request, opts ...grpc.CallOption) (*Create_Response, error)
	Delete(ctx context.Context, in *Delete_Request, opts ...grpc.CallOption) (*Delete_Response, error)
	Merge(ctx context.Context, in *Merge_Request, opts ...grpc.CallOption) (*Merge_Response, error)
	Diff(ctx context.Context, in *Diff_Request, opts ...grpc.CallOption) (*Diff_Response, error)
	Stash(ctx context.Context, in *Stash_Request, opts ...grpc.CallOption) (*Stash_Response, error)
	Checkout(ctx context.Context, in *Checkout_Request, opts ...grpc.CallOption) (*Checkout_Response, error)
	StreamFiles(ctx context.Context, in *Get_Request, opts ...grpc.CallOption) (Branch_StreamFilesClient, error)
	Watch(ctx context.Context, in *Watch_Request, opts ...grpc.CallOption) (Branch_WatchClient, error)
}

type branchClient struct {
	cc grpc.ClientConnInterface
}

func NewBranchClient(cc grpc.ClientConnInterface) BranchClient {
	return &branchClient{cc}
}

func (c *branchClient) Get(ctx context.Context, in *Get_Request, opts ...grpc.CallOption) (*Get_Response, error) {
	out := new(Get_Response)
	err := c.cc.Invoke(ctx, "/branchpb.Branch/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchClient) List(ctx context.Context, in *List_Request, opts ...grpc.CallOption) (*List_Response, error) {
	out := new(List_Response)
	err := c.cc.Invoke(ctx, "/branchpb.Branch/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchClient) Create(ctx context.Context, in *Create_Request, opts ...grpc.CallOption) (*Create_Response, error) {
	out := new(Create_Response)
	err := c.cc.Invoke(ctx, "/branchpb.Branch/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchClient) Delete(ctx context.Context, in *Delete_Request, opts ...grpc.CallOption) (*Delete_Response, error) {
	out := new(Delete_Response)
	err := c.cc.Invoke(ctx, "/branchpb.Branch/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchClient) Merge(ctx context.Context, in *Merge_Request, opts ...grpc.CallOption) (*Merge_Response, error) {
	out := new(Merge_Response)
	err := c.cc.Invoke(ctx, "/branchpb.Branch/Merge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchClient) Diff(ctx context.Context, in *Diff_Request, opts ...grpc.CallOption) (*Diff_Response, error) {
	out := new(Diff_Response)
	err := c.cc.Invoke(ctx, "/branchpb.Branch/Diff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchClient) Stash(ctx context.Context, in *Stash_Request, opts ...grpc.CallOption) (*Stash_Response, error) {
	out := new(Stash_Response)
	err := c.cc.Invoke(ctx, "/branchpb.Branch/Stash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchClient) Checkout(ctx context.Context, in *Checkout_Request, opts ...grpc.CallOption) (*Checkout_Response, error) {
	out := new(Checkout_Response)
	err := c.cc.Invoke(ctx, "/branchpb.Branch/Checkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchClient) StreamFiles(ctx context.Context, in *Get_Request, opts ...grpc.CallOption) (Branch_StreamFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Branch_ServiceDesc.Streams[0], "/branchpb.Branch/StreamFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &branchStreamFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Branch_StreamFilesClient interface {
	Recv() (*Get_File, error)
	grpc.ClientStream
}

type branchStreamFilesClient struct {
	grpc.ClientStream
}

func (x *branchStreamFilesClient) Recv() (*Get_File, error) {
	m := new(Get_File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *branchClient) Watch(ctx context.Context, in *Watch_Request, opts ...grpc.CallOption) (Branch_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Branch_ServiceDesc.Streams[1], "/branchpb.Branch/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &branchWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Branch_WatchClient interface {
	Recv() (*Watch_Response, error)
	grpc.ClientStream
}

type branchWatchClient struct {
	grpc.ClientStream
}

func (x *branchWatchClient) Recv() (*Watch_Response, error) {
	m := new(Watch_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BranchServer is the server API for Branch service.
// All implementations must embed UnimplementedBranchServer
// for forward compatibility
type BranchServer interface {
	Get(context.Context, *Get_Request) (*Get_Response, error)
	List(context.Context, *List_Request) (*List_Response, error)
	Create(context.Context, *Create_Request) (*Create_Response, error)
	Delete(context.Context, *Delete_Request) (*Delete_Response, error)
	Merge(context.Context, *Merge_Request) (*Merge_Response, error)
	Diff(context.Context, *Diff_Request) (*Diff_Response, error)
	Stash(context.Context, *Stash_Request) (*Stash_Response, error)
	Checkout(context.Context, *Checkout_Request) (*Checkout_Response, error)
	StreamFiles(*Get_Request, Branch_StreamFilesServer) error
	Watch(*Watch_Request, Branch_WatchServer) error
	mustEmbedUnimplementedBranchServer()
}

// UnimplementedBranchServer must be embedded to have forward compatible implementations.
type UnimplementedBranchServer struct {
}

func (UnimplementedBranchServer) Get(context.Context, *Get_Request) (*Get_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBranchServer) List(context.Context, *List_Request) (*List_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBranchServer) Create(context.Context, *Create_Request) (*Create_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBranchServer) Delete(context.Context, *Delete_Request) (*Delete_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBranchServer) Merge(context.Context, *Merge_Request) (*Merge_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge not implemented")
}
func (UnimplementedBranchServer) Diff(context.Context, *Diff_Request) (*Diff_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Diff not implemented")
}
func (UnimplementedBranchServer) Stash(context.Context, *Stash_Request) (*Stash_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stash not implemented")
}
func (UnimplementedBranchServer) Checkout(context.Context, *Checkout_Request) (*Checkout_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkout not implemented")
}
func (UnimplementedBranchServer) StreamFiles(*Get_Request, Branch_StreamFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFiles not implemented")
}
func (UnimplementedBranchServer) Watch(*Watch_Request, Branch_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedBranchServer) mustEmbedUnimplementedBranchServer() {}

// UnsafeBranchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BranchServer will
// result in compilation errors.
type UnsafeBranchServer interface {
	mustEmbedUnimplementedBranchServer()
}

func RegisterBranchServer(s grpc.ServiceRegistrar, srv BranchServer) {
	s.RegisterService(&Branch_ServiceDesc, srv)
}

func _Branch_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branchpb.Branch/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServer).Get(ctx, req.(*Get_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Branch_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branchpb.Branch/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServer).List(ctx, req.(*List_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Branch_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Create_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branchpb.Branch/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServer).Create(ctx, req.(*Create_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Branch_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Delete_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branchpb.Branch/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServer).Delete(ctx, req.(*Delete_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Branch_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Merge_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branchpb.Branch/Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServer).Merge(ctx, req.(*Merge_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Branch_Diff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Diff_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServer).Diff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branchpb.Branch/Diff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServer).Diff(ctx, req.(*Diff_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Branch_Stash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stash_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServer).Stash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branchpb.Branch/Stash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServer).Stash(ctx, req.(*Stash_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Branch_Checkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Checkout_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServer).Checkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branchpb.Branch/Checkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServer).Checkout(ctx, req.(*Checkout_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Branch_StreamFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Get_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BranchServer).StreamFiles(m, &branchStreamFilesServer{stream})
}

type Branch_StreamFilesServer interface {
	Send(*Get_File) error
	grpc.ServerStream
}

type branchStreamFilesServer struct {
	grpc.ServerStream
}

func (x *branchStreamFilesServer) Send(m *Get_File) error {
	return x.ServerStream.SendMsg(m)
}

func _Branch_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Watch_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BranchServer).Watch(m, &branchWatchServer{stream})
}

type Branch_WatchServer interface {
	Send(*Watch_Response) error
	grpc.ServerStream
}

type branchWatchServer struct {
	grpc.ServerStream
}

func (x *branchWatchServer) Send(m *Watch_Response) error {
	return x.ServerStream.SendMsg(m)
}

// Branch_ServiceDesc is the grpc.ServiceDesc for Branch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Branch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "branchpb.Branch",
	HandlerType: (*BranchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Branch_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Branch_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Branch_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Branch_Delete_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _Branch_Merge_Handler,
		},
		{
			MethodName: "Diff",
			Handler:    _Branch_Diff_Handler,
		},
		{
			MethodName: "Stash",
			Handler:    _Branch_Stash_Handler,
		},
		{
			MethodName: "Checkout",
			Handler:    _Branch_Checkout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFiles",
			Handler:       _Branch_StreamFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _Branch_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "branch.proto",
}
