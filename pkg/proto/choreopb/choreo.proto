/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package choreopb;
option go_package = "github.com/kform-dev/choreo/pkg/proto/choreopb";

service Choreo {
    rpc Get (Get.Request) returns (Get.Response) {}
    rpc Apply (Apply.Request) returns (Apply.Response) {}
    //rpc Watch (Watch.Request) returns (stream Watch.Response) {}
    rpc Start (Start.Request) returns (Start.Response) {}
    rpc Stop (Stop.Request) returns (Stop.Response) {}
    rpc Once (Once.Request) returns (Once.Response) {}
    rpc Load (Load.Request) returns (Load.Response) {}
  }


message ChoreoContext {
    string path = 1; // when we supply this this is a manual path
    string url = 2;
    string ref = 3;
    string directory = 4;
    string secret = 5;
    bool continuous = 6;
}

message Get {
    message Request {
        string choreo = 1;
        Options options = 2;        
    }

    message Response {
        ChoreoContext choreoContext = 1;   
        bool status = 2;
        string reason = 3; 
    }

    message Options {
    }

}

message Apply {
    message Request {
        string choreo = 1;
        ChoreoContext choreoContext = 2; 
        Options options = 3;
    }

    message Response {
    }

    message Options {
    }
}

message Watch {
    message Request {
        string choreo = 1;
        Options options = 2;
    }

    message Response {
        ChoreoContext choreoContext = 1; 
        EventType eventType = 2;

    }

    enum EventType{
        ERROR = 0;
        ADDED = 1;
        MODIFIED = 2;
        DELETED = 3;
        BOOKMARK = 4;
    }  

    message Options {
        bool watch = 1 ; // indicate watch only, otherwise list and watch is used
    }
}

// Start start choreo
// Removed branch since we only allow checkedout -> RW, other branches are RO
message Start {
    message Request {
        string choreo = 1;
        Options options = 2;
        
    }

    message Response {
    }

    message Options {
    }
}

// Removed branch since we only allow checkedout -> RW, other branches are RO
message Stop {
    message Request {
        string choreo = 1;
        Options options = 2;
    }

    message Response {
    }

    message Options {
    }
}

// Removed branch since we only allow checkedout -> RW, other branches are RO
message Once {
    message Request {
        string choreo = 1;
        Options options = 2;
    }

    message Options {
    }

    message Response {
        string executionTime = 1;
        bool success = 2;
        string reconcileRef = 3;
        string message = 4;
        map<string, Operations> results = 5;
    }

    message Operations {
        // sting is the string of the operation
        map<string, int32> operation_counts = 1;
    }
}


message Load {
    message Request {
        string choreo = 1;
        Options options = 2;
    }

    message Response {
        bytes object = 1;
    }

    message Options {
    }
}

enum Operation {
    UNKNOWN = 0;
    START = 1;
    STOP = 2;
    ERROR = 3;
    REQUEUE = 4;
    // Add more operations as needed
}