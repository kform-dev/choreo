/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package choreopb;
option go_package = "github.com/kform-dev/choreo/pkg/proto/choreopb";


service Choreo {
    rpc Get (Get.Request) returns (Get.Response) {}
    rpc Apply (Apply.Request) returns (Apply.Response) {}
    //rpc Watch (Watch.Request) returns (stream Watch.Response) {}
    rpc Commit (Commit.Request) returns (Commit.Response) {}
    rpc Push (Push.Request) returns (Push.Response) {}
  }

// 3 usages:
// 1. dev with human git -> production = false, path is set
// 2. dev with choreo git -> production = false, branch, url, ref, dir is set
// 3. prod ->  production = true, url, ref, dir is set; (branch is irrelevant)
message ChoreoContext {
    bool production = 1; // drives continuous mode
    string path = 2; // when we supply this this is a manual path -> dev with human git
    string branch = 3; // dev with choreo git
    string url = 4;
    string ref = 5;
    string directory = 6;
    string secret = 7;
}

message Get {
    message Request {
        Options options = 1;        
    }

    message Response {
        ChoreoContext choreoContext = 1;   
        bool status = 2;
        string reason = 3; 
    }

    message Options {
        string proxyName = 1;
        string proxyNamespace = 2;
    }
}

message Apply {
    message Request {
        ChoreoContext choreoContext = 1; 
        Options options = 2;
    }

    message Response {
    }

    message Options {
        string proxyName = 1;
        string proxyNamespace = 2;
    }
}

message Watch {
    message Request {
        Options options = 1;
    }

    message Response {
        ChoreoContext choreoContext = 1; 
        EventType eventType = 2;

    }

    enum EventType{
        ERROR = 0;
        ADDED = 1;
        MODIFIED = 2;
        DELETED = 3;
        BOOKMARK = 4;
    }  

    message Options {
        bool watch = 1 ; // indicate watch only, otherwise list and watch is used
        string proxyName = 2;
        string proxyNamespace = 3;
    }
}

message Commit {
    message Request {
        string message = 1; 
        Options options = 2;
    }

    message Response {
        string message = 1; 
    }

    message Options {
        string proxyName = 1;
        string proxyNamespace = 2;
        bool push = 3; // when the push is set the commit is push
    }
}

message Push {
    message Request {
        Options options = 2;
    }

    message Response {
    }

    message Options {
        string proxyName = 1;
        string proxyNamespace = 2;
    }
}