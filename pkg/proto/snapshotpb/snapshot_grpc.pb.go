// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.0
// source: snapshot.proto

package snapshotpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnapshotClient is the client API for Snapshot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotClient interface {
	Get(ctx context.Context, in *Get_Request, opts ...grpc.CallOption) (*Get_Response, error)
	List(ctx context.Context, in *List_Request, opts ...grpc.CallOption) (*List_Response, error)
	Delete(ctx context.Context, in *Delete_Request, opts ...grpc.CallOption) (*Delete_Response, error)
	Diff(ctx context.Context, in *Diff_Request, opts ...grpc.CallOption) (*Diff_Response, error)
	Result(ctx context.Context, in *Result_Request, opts ...grpc.CallOption) (*Result_Response, error)
	Watch(ctx context.Context, in *Watch_Request, opts ...grpc.CallOption) (Snapshot_WatchClient, error)
}

type snapshotClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotClient(cc grpc.ClientConnInterface) SnapshotClient {
	return &snapshotClient{cc}
}

func (c *snapshotClient) Get(ctx context.Context, in *Get_Request, opts ...grpc.CallOption) (*Get_Response, error) {
	out := new(Get_Response)
	err := c.cc.Invoke(ctx, "/snapshotpb.Snapshot/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotClient) List(ctx context.Context, in *List_Request, opts ...grpc.CallOption) (*List_Response, error) {
	out := new(List_Response)
	err := c.cc.Invoke(ctx, "/snapshotpb.Snapshot/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotClient) Delete(ctx context.Context, in *Delete_Request, opts ...grpc.CallOption) (*Delete_Response, error) {
	out := new(Delete_Response)
	err := c.cc.Invoke(ctx, "/snapshotpb.Snapshot/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotClient) Diff(ctx context.Context, in *Diff_Request, opts ...grpc.CallOption) (*Diff_Response, error) {
	out := new(Diff_Response)
	err := c.cc.Invoke(ctx, "/snapshotpb.Snapshot/Diff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotClient) Result(ctx context.Context, in *Result_Request, opts ...grpc.CallOption) (*Result_Response, error) {
	out := new(Result_Response)
	err := c.cc.Invoke(ctx, "/snapshotpb.Snapshot/Result", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotClient) Watch(ctx context.Context, in *Watch_Request, opts ...grpc.CallOption) (Snapshot_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Snapshot_ServiceDesc.Streams[0], "/snapshotpb.Snapshot/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &snapshotWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Snapshot_WatchClient interface {
	Recv() (*Watch_Response, error)
	grpc.ClientStream
}

type snapshotWatchClient struct {
	grpc.ClientStream
}

func (x *snapshotWatchClient) Recv() (*Watch_Response, error) {
	m := new(Watch_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnapshotServer is the server API for Snapshot service.
// All implementations must embed UnimplementedSnapshotServer
// for forward compatibility
type SnapshotServer interface {
	Get(context.Context, *Get_Request) (*Get_Response, error)
	List(context.Context, *List_Request) (*List_Response, error)
	Delete(context.Context, *Delete_Request) (*Delete_Response, error)
	Diff(context.Context, *Diff_Request) (*Diff_Response, error)
	Result(context.Context, *Result_Request) (*Result_Response, error)
	Watch(*Watch_Request, Snapshot_WatchServer) error
	mustEmbedUnimplementedSnapshotServer()
}

// UnimplementedSnapshotServer must be embedded to have forward compatible implementations.
type UnimplementedSnapshotServer struct {
}

func (UnimplementedSnapshotServer) Get(context.Context, *Get_Request) (*Get_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSnapshotServer) List(context.Context, *List_Request) (*List_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSnapshotServer) Delete(context.Context, *Delete_Request) (*Delete_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSnapshotServer) Diff(context.Context, *Diff_Request) (*Diff_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Diff not implemented")
}
func (UnimplementedSnapshotServer) Result(context.Context, *Result_Request) (*Result_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Result not implemented")
}
func (UnimplementedSnapshotServer) Watch(*Watch_Request, Snapshot_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedSnapshotServer) mustEmbedUnimplementedSnapshotServer() {}

// UnsafeSnapshotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotServer will
// result in compilation errors.
type UnsafeSnapshotServer interface {
	mustEmbedUnimplementedSnapshotServer()
}

func RegisterSnapshotServer(s grpc.ServiceRegistrar, srv SnapshotServer) {
	s.RegisterService(&Snapshot_ServiceDesc, srv)
}

func _Snapshot_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapshotpb.Snapshot/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServer).Get(ctx, req.(*Get_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshot_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapshotpb.Snapshot/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServer).List(ctx, req.(*List_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshot_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Delete_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapshotpb.Snapshot/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServer).Delete(ctx, req.(*Delete_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshot_Diff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Diff_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServer).Diff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapshotpb.Snapshot/Diff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServer).Diff(ctx, req.(*Diff_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshot_Result_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServer).Result(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapshotpb.Snapshot/Result",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServer).Result(ctx, req.(*Result_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshot_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Watch_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapshotServer).Watch(m, &snapshotWatchServer{stream})
}

type Snapshot_WatchServer interface {
	Send(*Watch_Response) error
	grpc.ServerStream
}

type snapshotWatchServer struct {
	grpc.ServerStream
}

func (x *snapshotWatchServer) Send(m *Watch_Response) error {
	return x.ServerStream.SendMsg(m)
}

// Snapshot_ServiceDesc is the grpc.ServiceDesc for Snapshot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Snapshot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snapshotpb.Snapshot",
	HandlerType: (*SnapshotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Snapshot_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Snapshot_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Snapshot_Delete_Handler,
		},
		{
			MethodName: "Diff",
			Handler:    _Snapshot_Diff_Handler,
		},
		{
			MethodName: "Result",
			Handler:    _Snapshot_Result_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Snapshot_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "snapshot.proto",
}
