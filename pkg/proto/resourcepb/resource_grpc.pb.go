// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: resource.proto

package resourcepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceClient is the client API for Resource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceClient interface {
	Get(ctx context.Context, in *Get_Request, opts ...grpc.CallOption) (*Get_Response, error)
	List(ctx context.Context, in *List_Request, opts ...grpc.CallOption) (*List_Response, error)
	Create(ctx context.Context, in *Create_Request, opts ...grpc.CallOption) (*Create_Response, error)
	Update(ctx context.Context, in *Update_Request, opts ...grpc.CallOption) (*Update_Response, error)
	Apply(ctx context.Context, in *Apply_Request, opts ...grpc.CallOption) (*Apply_Response, error)
	Delete(ctx context.Context, in *Delete_Request, opts ...grpc.CallOption) (*Delete_Response, error)
	Watch(ctx context.Context, in *Watch_Request, opts ...grpc.CallOption) (Resource_WatchClient, error)
}

type resourceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceClient(cc grpc.ClientConnInterface) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) Get(ctx context.Context, in *Get_Request, opts ...grpc.CallOption) (*Get_Response, error) {
	out := new(Get_Response)
	err := c.cc.Invoke(ctx, "/resourcepb.Resource/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) List(ctx context.Context, in *List_Request, opts ...grpc.CallOption) (*List_Response, error) {
	out := new(List_Response)
	err := c.cc.Invoke(ctx, "/resourcepb.Resource/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Create(ctx context.Context, in *Create_Request, opts ...grpc.CallOption) (*Create_Response, error) {
	out := new(Create_Response)
	err := c.cc.Invoke(ctx, "/resourcepb.Resource/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Update(ctx context.Context, in *Update_Request, opts ...grpc.CallOption) (*Update_Response, error) {
	out := new(Update_Response)
	err := c.cc.Invoke(ctx, "/resourcepb.Resource/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Apply(ctx context.Context, in *Apply_Request, opts ...grpc.CallOption) (*Apply_Response, error) {
	out := new(Apply_Response)
	err := c.cc.Invoke(ctx, "/resourcepb.Resource/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Delete(ctx context.Context, in *Delete_Request, opts ...grpc.CallOption) (*Delete_Response, error) {
	out := new(Delete_Response)
	err := c.cc.Invoke(ctx, "/resourcepb.Resource/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Watch(ctx context.Context, in *Watch_Request, opts ...grpc.CallOption) (Resource_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Resource_ServiceDesc.Streams[0], "/resourcepb.Resource/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Resource_WatchClient interface {
	Recv() (*Watch_Response, error)
	grpc.ClientStream
}

type resourceWatchClient struct {
	grpc.ClientStream
}

func (x *resourceWatchClient) Recv() (*Watch_Response, error) {
	m := new(Watch_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourceServer is the server API for Resource service.
// All implementations must embed UnimplementedResourceServer
// for forward compatibility
type ResourceServer interface {
	Get(context.Context, *Get_Request) (*Get_Response, error)
	List(context.Context, *List_Request) (*List_Response, error)
	Create(context.Context, *Create_Request) (*Create_Response, error)
	Update(context.Context, *Update_Request) (*Update_Response, error)
	Apply(context.Context, *Apply_Request) (*Apply_Response, error)
	Delete(context.Context, *Delete_Request) (*Delete_Response, error)
	Watch(*Watch_Request, Resource_WatchServer) error
	mustEmbedUnimplementedResourceServer()
}

// UnimplementedResourceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceServer struct {
}

func (UnimplementedResourceServer) Get(context.Context, *Get_Request) (*Get_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedResourceServer) List(context.Context, *List_Request) (*List_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedResourceServer) Create(context.Context, *Create_Request) (*Create_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedResourceServer) Update(context.Context, *Update_Request) (*Update_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResourceServer) Apply(context.Context, *Apply_Request) (*Apply_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedResourceServer) Delete(context.Context, *Delete_Request) (*Delete_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResourceServer) Watch(*Watch_Request, Resource_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedResourceServer) mustEmbedUnimplementedResourceServer() {}

// UnsafeResourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServer will
// result in compilation errors.
type UnsafeResourceServer interface {
	mustEmbedUnimplementedResourceServer()
}

func RegisterResourceServer(s grpc.ServiceRegistrar, srv ResourceServer) {
	s.RegisterService(&Resource_ServiceDesc, srv)
}

func _Resource_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcepb.Resource/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Get(ctx, req.(*Get_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcepb.Resource/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).List(ctx, req.(*List_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Create_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcepb.Resource/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Create(ctx, req.(*Create_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Update_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcepb.Resource/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Update(ctx, req.(*Update_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Apply_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcepb.Resource/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Apply(ctx, req.(*Apply_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Delete_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcepb.Resource/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Delete(ctx, req.(*Delete_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Watch_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServer).Watch(m, &resourceWatchServer{stream})
}

type Resource_WatchServer interface {
	Send(*Watch_Response) error
	grpc.ServerStream
}

type resourceWatchServer struct {
	grpc.ServerStream
}

func (x *resourceWatchServer) Send(m *Watch_Response) error {
	return x.ServerStream.SendMsg(m)
}

// Resource_ServiceDesc is the grpc.ServiceDesc for Resource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resourcepb.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Resource_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Resource_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Resource_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Resource_Update_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _Resource_Apply_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Resource_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Resource_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "resource.proto",
}
